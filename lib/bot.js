const Discord = require('discord.js')

const StakingClient = require('./StakingClient.js')
const GraphicalStakingClient = require('./GraphicalStakingClient.js')
const clearTempDirectory = require(`${__dirname}/util/clearTempDirectory.js`)

let auth = {
    token: process.env.BOT_TOKEN
}
if (!auth.token) {
    auth = require(`${__dirname}/../auth.json`)
}

// Initialize Discord Bot
const client = new Discord.Client()

client.on('ready', async () => {
    console.log(`Logged in as ${client.user.tag}!`)
    client.user.setActivity('!commands', { type: 'PLAYING' })
    clearTempDirectory()
})

// Command List
const commandList = [
    { name: '!commands', value: 'List all of the commands' },
    { name: '!stake <player1> <player2>', value: 'Stake player1 vs player2 using dynamically generated images'},
    { name: '!basic_stake <player1> <player2>', value: 'Stake player1 vs player2 using basic static images'}
]

/**
 * Create a MessageEmbed for the commands list
 *
 * @returns {Discord.MessageEmbed} a message embed containing the fields from the command list
 */
const getCommandsMessage = () => {
    return new Discord.MessageEmbed()
      .setTitle('Commands')
      .setColor(0xff0000)
      .addFields(commandList)
}

client.on('message', async msg => {
    if (msg.content.substring(0, 1) == '!') {
        let args = msg.content.substring(1).split(' ')
        let cmd = args[0]
        cmd = cmd.toLowerCase()
       
        args = args.splice(1)
        switch(cmd) {
            case 'commands':
                const embedCommandMessage = getCommandsMessage()
                msg.channel.send(embedCommandMessage)
                break;
            case 'stakee':
                await graphicalStakeHandler(msg, args)
                break;
            case 'basic_stake':
                await basicStakeHandler(msg, args)
                break;
        }
    }
})

/**
 * Handler function to deal with requests for a graphical staking session
 *
 * @param {object} msg the message object generated by the requester
 * @param {Array.<string>} args the argument array which should be 2 strings that are the names of the players
 */
let graphicalStakeHandler = async (msg, args) => {
    let validCall = true
    if (args.length !== 2) {
        msg.reply('**Usage:** *!stake player1 player2*')
        validCall = false
    }

    if (validCall) {
        const stakingClient = new GraphicalStakingClient(msg.channel, args[0], args[1])
        await stakingClient.stake()
    }
}

/**
 * Handler function to deal with requests for a a basic staking session
 *
 * @param {object} msg the message object generated by the requester
 * @param {Array.<string>} args the argument array which should be 2 strings that are the names of the players
 */
let basicStakeHandler = async (msg, args) => {
    let validCall = true
    if (args.length !== 2) {
        msg.reply('**Usage:** *!stake player1 player2*')
        validCall = false
    }

    if (validCall) {
        const stakingClient = new StakingClient(msg.channel, args[0], args[1])
        await stakingClient.stake()
    }
}

client.login(auth.token)
